
```{r}
#| label: initialisation
#| message: false
#| warning: false
#| echo: false

library(tidyverse)
library(flextable)

knitr::opts_chunk$set(echo = F, message = F, warning = F)

source("../CommonFunctions/getSQL.r")

VXReportDate <- as.Date("2025-07-28")
VXDefectReportDate <- as.Date("2025-07-28")
JWMReportDate <- as.Date("2025-07-25")

```



```{r}
#| label: InitialDataDownload

con <- DBI::dbConnect(odbc::odbc(),    
                      Driver = "ODBC Driver 18 for SQL Server", 
                      Server = "abcrepldb.database.windows.net",  
                      Database = "ABCPackerRepl",   
                      UID = "abcadmin",   
                      PWD = "Trauts2018!",
                      Port = 1433
)

ExpBinsToDate <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/ExportBinsToDate.sql"))

ExpBinsShippedToDate <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/ExportBinsShipped2025.sql"))

SFPackRunMapping <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/SFPackRunMapping.sql"))

SFPERuns <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/SFPERuns.sql"))

ContainerToGBDMapping <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/ContainerToGBDMapping.sql"))

JWMPalletID <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/JWMPalletID.sql"))

ShippedForRepacking <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/ShippedForRepacking.sql"))

PackedForRepacking <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/PackedForRepacking.sql"))

PLNoReplace <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/PLNoReplace.sql"))

CartonReco <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/CartonReco.sql"))

DBI::dbDisconnect(con)


BinsShippedYTDTotal <- ExpBinsShippedToDate |>
  group_by(`Packing site`) |>
  summarise(NoOfUnits = sum(NoOfUnits, na.rm=T)) |>
  pivot_wider(names_from = `Packing site`,
              values_from = NoOfUnits,
              values_fill = 0) |>
  mutate(Total = `Sunfruit Limited` + `Te Ipu Packhouse (RO)`,
         ProductDesc = "Total bins") |>
  relocate(ProductDesc, .before = `Sunfruit Limited`)

BinsShippedYTD <- ExpBinsShippedToDate |>
  group_by(ProductDesc, `Packing site`) |>
  summarise(NoOfUnits = sum(NoOfUnits, na.rm=T)) |>
  pivot_wider(id_cols = ProductDesc,
              names_from = `Packing site`,
              values_from = NoOfUnits,
              values_fill = 0) |>
  mutate(Total = `Sunfruit Limited` + `Te Ipu Packhouse (RO)`) |>
  bind_rows(BinsShippedYTDTotal)

########################################################################################
#                             SF Bin Import & Reconciliation                           #
########################################################################################

SFBin <- read_csv("data/Unpacked20250723085138.csv", show_col_types = F) |>
  mutate(across(.cols = c(PackDate, HarvestDate, SubmDate), ~as.Date(.,"%d/%m/%Y"))) |>
  filter(VarietyDesc == "Rockit (TM)")
#
# Map submission code (BinDeliveryNo) to Pack run number in Sunfruit
#
BinDeliveryMapping <- SFBin |>
  filter(BinType == "Inwards Bin",
         ContractDesc == "ROCKIT FIELD Bin Pkg",
         !is.na(Run)) |>
  group_by(SubmCode, HarvestDate, PackDate, Run) |>
  summarise(NoOfBins = n(),
            InputKgs = sum(KGs, na.rm=T),
            .groups = "drop")
#
# Calculate input Kgs and weighted average harvest date for each pack run
#
PRunSummary <- BinDeliveryMapping |>
  group_by(Run) |>
  summarise(HarvestDate = weighted.mean(HarvestDate, InputKgs),
            InputKgs = sum(InputKgs))
#
# Map the P to PE run mapping from Sunfruit data
#
PToPERunMapping <- SFBin |>
  filter(BinType %in% c("Export Bin","Z Pack")) |>
  group_by(SourceRun, Run, BinType) |>
  summarise(Units = sum(Units),
            KGs = sum(KGs, na.rm=T),
            .groups = "drop") |>
  filter(!is.na(Run)) 
#
# Group by PE run and calculate Input and Export KGs for each PE run
#
PToPERunMappingSummary <- PToPERunMapping |>
  group_by(Run) |>
  summarise(SourceRun = max(SourceRun),
            ExportKgs = sum(KGs),
            .groups = "drop") |>
  rename(PERun = Run,
         Run = SourceRun) |>
  left_join(PRunSummary, by = "Run")
#
# Map all graderBatchIDs for 2025 that are closed
#
#
# map packouts from P runs to PE runs
#
PEPackouts <- PToPERunMappingSummary |>
  select(-c(InputKgs)) |>
  left_join(SFPackRunMapping, by = c("Run" = "ExternalRun")) |>
  mutate(HarvestDate = coalesce(HarvestDate.x, HarvestDate.y),
         FBStorageDays = as.integer(PackDate-HarvestDate)) |>
  select(-c(HarvestDate.x, HarvestDate.y)) |>
  select(c(PERun, Run, Packout, FBStorageDays)) |>
  inner_join(SFPERuns, by = c("PERun" = "ExternalRun")) |>
  rename(ExternalRun = PERun) |>
  select(c(GraderBatchID, GraderBatchNo, ExternalRun, Packout, FBStorageDays, PackDate,`Packing site`))
#
# Map all graderBatchIDs for 2025 that are closed
#
GraderBatches2025 <- SFPackRunMapping |>
  filter(is.na(ExternalRun),
         !is.na(ClosedDateTime)) |>
  mutate(FBStorageDays = as.integer(PackDate-HarvestDate)) |>
  select(c(GraderBatchID, GraderBatchNo, ExternalRun, Packout, FBStorageDays,PackDate,`Packing site`)) |>
  bind_rows(PEPackouts)

################################################################################
#                    Import and Parse the JWM and VX data                      #
################################################################################

################################################################################
#                     First the JWM data in two files                          #
################################################################################
#
# The Joy Wing Mau data is in two excel files which are quite different.  The first is up to 
# the 18th May 2025.  This is imported as data frame JWM2025Repacking. The seond is imported as
# JWM2025Repacking2. Bot files requires a lot of parsing.
#
JWM2025Repacking <- read_csv("data/JWMRepackingReport0518.csv", show_col_types = F) |>
  mutate(`Repacking Date` = as.Date(`Repacking Date`, "%d/%m/%Y"),
         across(.cols = c(`Total Bin Weight KG`,`FG Weight`,`FG Standard Weight`,`Overweight KG`,
                          `Defects KG`,`Rotted KG`,`Defect rate`),~str_extract(.,"^[0-9]+")),
         across(.cols = c(`Total Bin Weight KG`,`FG Weight`,`FG Standard Weight`,`Overweight KG`,
                          `Defects KG`,`Rotted KG`,`Defect rate`),~as.numeric(.)),
         across(.cols = c(`Shrinkage Kgs`,`Shrinkage %`),~str_extract(.,"[-]*[0-9]+")),
         across(.cols = c(`Shrinkage Kgs`,`Shrinkage %`),~as.numeric(.))) |>
  select(-c(Month...2,Week,`FG Specification`,Packout,`Defect rate`,`Labor cost`,`Shrinkage %`,`The Rate of Overweight KG`,
            `The Rate of Juice Apple(KG)`,`Date&Rpin` ,`Container&RPIN`,Month...47,Remark,`Arrival Date&Container Number`,
            DATE,`Standard weight`,`FG Sample`,Puntures,`The Rate of Spoilted`,Bruise,`The Rate of Cosmetic`,`JA Sample`,
            `Export Fruit`,`The Rate of Export Fruit`,`Processing Number`,`Arrival Date`)) |>
  rename(RPIN = Rpin,
         Activity = `Procesisng Type`,
         `RM Code` = `Raw material Code`,
         `RM Des` = `Raw Des`,
         `Count of CartonsBins` = `Count of Cartons/Bins`,
         Unitcarton = `Units/carton`,
         Cartonpallet = `Carton/Pallet`,
         `Act FG KG` = `FG Weight`,
         `FG STD KG` = `FG Standard Weight`,
         `Over-weight kgs` = `Overweight KG`,
         `Juice Apple kg` = `Juice Apple(KG)`) |>  
  mutate(`Total Carton Weight KG` = NA) |>
  select(c(`Container Number`,
           `Repacking Date`,
           WH,
           Activity,
           RPIN,
           `Pallets Number`,
           `Count of CartonsBins`,
           `Total Carton Weight KG`,
           `Total Bin Weight KG`,
           `FG Carton`,
           `Defects KG`,
           `Rotted KG`,
           `RM Code`,
           `RM Des`,
           `FG Code`,
           `FG Des`,
           Unitcarton,
           Cartonpallet,
           `Act FG KG`,
           `FG STD KG`,
           `Shrinkage Kgs`,
           `Over-weight kgs`,
           `Juice Apple kg`))
                          
#
# Import and tidy the latest data
#
JWM2025Repacking2 <- read_csv("data/JWMRepackingReport0725.csv", show_col_types = F) |>
  mutate(`Repacking Date` = as.Date(`Repacking Date`, "%d/%m/%Y"),
         across(.cols = c(`Total Bin Weight KG`,`Defects KG`,`Rotted KG`,`Act FG KG`,
                          `Over-weight kgs`), ~str_extract(.,"^[0-9]+")),
         across(.cols = c(`Total Bin Weight KG`,`Defects KG`,`Rotted KG`,`Act FG KG`,
                          `Over-weight kgs`), ~as.numeric(.)),
         `Shrinkage Kgs` = str_extract(`Shrinkage Kgs`,"[-]*[0-9]+"),
         `Shrinkage Kgs` = as.numeric(`Shrinkage Kgs`),
         across(.cols = c(`Raw material`,FG),~str_replace(.,"\\?+$","")),
         across(.cols = c(`Raw material`,FG),~str_squish(.))) |>
  select(-c(`Procesisng Type`,`Raw material`,Packout,`Shrinkage Kgs%`,`Over-weight kgs%`,FG,
            `Juice Apple kg%`,`DATE&RPIN`,`Container&RPIN`,Remark, Month,Week,`Material STD KG`,
            Unitpallet)) |>
  rename(RPIN = Rpin,
         Activity = `Processing Type EN`)

#
# Join the old and new data frames together
#
JWM2025Total <- JWM2025Repacking |>
  bind_rows(JWM2025Repacking2)
#
# Filter out the rework activity
#

JWM2025TotalRP <- JWM2025Total |>
  filter(Activity == "Repacking") |>
  mutate(RepackBatchID = row_number(),
         PalletsTemp = str_replace(`Pallets Number`, "^\x91|^\x92|",""),
         PalletsTemp = str_replace_all(PalletsTemp,"^\\n|\\n$",""),
         PalletLabelNo = str_split(PalletsTemp,"\\n"),
         RepackBatchID2 = lag(RepackBatchID),
         RepackBatchID = if_else(is.na(PalletLabelNo),
                                 RepackBatchID2,
                                 RepackBatchID)) |>
  select(-c(PalletsTemp))

JWM2025TotalRPSummary <- JWM2025TotalRP |>
  mutate(`Packed KG` = `Total Bin Weight KG`- `Juice Apple kg`,
         `Act FG KG` = coalesce(`Act FG KG`,`Packed KG`)) |>
  select(-c(`Packed KG`)) |>
  group_by(RepackBatchID) |>
  summarise(`Container Number` = max(`Container Number`),
            `Repacking Date` = min(`Repacking Date`, na.rm=T),
            `RM Code` = max(`RM Code`, na.rm=T),
            `RM Des` = max(`RM Des`, na.rm=T),
            `Count of CartonsBins` = sum(`Count of CartonsBins`, na.rm=T),
            `Total Bin Weight KG` = sum(`Total Bin Weight KG`, na.rm=T),
            `Act FG KG` = sum(`Act FG KG`, na.rm=T),
            `Defects KG` = sum(`Defects KG`, na.rm=T),
            `Rotted KG` = sum(`Rotted KG`, na.rm=T),
            `Juice Apple kg` = sum(`Juice Apple kg`, na.rm=T)) |> # this appears to be the Defect KG + Rotted KG
  mutate(`Secondary packout` = `Act FG KG`/`Total Bin Weight KG`)

ContainerPalletMap <- JWM2025TotalRP |>
  select(c(RepackBatchID,`Container Number`,PalletLabelNo,`Repacking Date`,`RM Code`,`RM Des`,
           `Total Bin Weight KG`,`Count of CartonsBins`,`FG Code`,`FG Des`,Unitcarton,
           Cartonpallet,`FG Carton`,`Act FG KG`,`FG STD KG`,`Over-weight kgs`,
           `Defects KG`,`Rotted KG`,`Juice Apple kg`))|>
  unnest(PalletLabelNo) |>
  mutate(PalletLabelNo = str_replace(PalletLabelNo, "'",""),
         PalletLabelNo = case_when(PalletLabelNo == "00394198062500202621" ~ "00394198062500222621",
                                   PalletLabelNo == "00394198062502013209" ~ "00394198062500213209",
                                   TRUE ~ PalletLabelNo)) |>
  filter(!str_detect(`RM Des`,"^Juice Apple"))

PCIU6070176 <- ContainerPalletMap |>
  filter(`Container Number` %in% c("PCIU6070176","SEGU9944356") & `RM Code` == "ROC1201072120") |>
  arrange(`Container Number`) |>
  mutate(labelID = row_number())

ABCPLNo <- PLNoReplace |>
  arrange(ContainerNo) |>
  mutate(labelID = row_number())

ReplacedPCIU6070176 <- PCIU6070176 |>
  select(-PalletLabelNo) |>
  left_join(ABCPLNo |>
              select(c(labelID, ContainerNo, PalletLabelNo)) |>
              rename(`Container Number` = ContainerNo), 
            by = c("Container Number","labelID")) |>
  mutate(`Act FG KG` = `Total Bin Weight KG` - `Juice Apple kg`) |>
  relocate(PalletLabelNo, .after = `Container Number`) |>
  select(-labelID)

ContainerPalletMap2 <- ContainerPalletMap |>
  filter(!(`Container Number` %in% c("PCIU6070176","SEGU9944356")) & `RM Code` != "ROC1201072120") |>
  bind_rows(ReplacedPCIU6070176)|>
  mutate(PalletLabelNo = if_else(`Container Number` == "SZLU9585917" &
                                   str_count(PalletLabelNo, "[0-9]") == 8,
                                 str_c("003941980625",PalletLabelNo),
                                 PalletLabelNo),
         PalletLabelNo = if_else(`Container Number` == "CGMU9406143" &
                                   str_count(PalletLabelNo, "[0-9]") == 8,
                                 str_c("003942190378",PalletLabelNo),
                                 PalletLabelNo),
         PalletLabelNo = if_else(`Container Number` == "OERU4077210" &
                                   str_count(PalletLabelNo, "\\d") == 8,
                                 str_c("003941980625",PalletLabelNo),
                                 PalletLabelNo)) |>
  mutate(CNTemp = str_sub(PalletLabelNo, -10,-1),
         CartonNo = str_c("SF00",CNTemp)) |>
  relocate(CartonNo, .after = PalletLabelNo) |>
  select(-c(CNTemp)) |>
# Corrections
  mutate(PalletLabelNo = if_else(PalletLabelNo == "394198062500454000",
                                 "00394198062500454619",
                                 PalletLabelNo), # OERU4077210
         CartonNo = if_else(CartonNo == "SF006259341000", "SF002593410008", CartonNo), #OERU4077210
         CartonNo = case_when(CartonNo == "SF002555180003" ~ "SF002551180003",
                              CartonNo == "SF002555180002" ~ "SF002551180002",
                              CartonNo == "SF002555180001" ~ "SF002551180001",
                              TRUE ~ CartonNo), #CGMU5559714
         CartonNo = if_else(CartonNo == "SF002563280001","SF002563280008",CartonNo), #MNBU9063718
         PalletLabelNo = if_else(PalletLabelNo == "00394198062500428000",
                                 "00394198062500428238",
                                 PalletLabelNo), #PCIU6141958
         CartonNo = if_else(CartonNo == "SF002563280001","SF002563280008",CartonNo), #PCIU6141958
         PalletLabelNo = if_else(PalletLabelNo == "394198062500306000",
                                 "00394198062500304006",
                                 PalletLabelNo), #TTNU8835302
         PalletLabelNo = if_else(PalletLabelNo == "401774",
                                 "00394198062500401774",
                                 PalletLabelNo), #CGMU5427596
         PalletLabelNo = case_when(PalletLabelNo %in% c("00394198062598800002","00394198062598800003","00394198062598800004") ~ 
                                     "00394198062500842010",
                                   PalletLabelNo %in% c("00394198062503600001","00394198062503600002") ~
                                     "00394198062500856260",
                                   TRUE ~ PalletLabelNo)) #MNBU0371936
#
# Function to apply corrections
#
ApplyCorrections <- function(ContainerNo,ContainerPalletMap2,JWMPalletID,CartonReco) {
  
  temp <- ContainerPalletMap2 |>
    filter(`Container Number` == {{ContainerNo}}) |>
    left_join(JWMPalletID |>
                select(-c(PalletID,PalletWeight)),
              by = c("Container Number", "PalletLabelNo"))
  
  temp2 <- temp |>
    filter(is.na(Season)) |>
    select(-c(Season,`Pallet type`,ProductDesc,`Pack type`,NoOfUnits,
              `Packing site`,GraderBatchID,DespatchDate)) |>     
    left_join(CartonReco |>
                select(c(Season,CartonNo,`Pallet type`,ProductDesc,`Pack type`,
                         NoOfUnits,`Packing site`,GraderBatchID,`Container Number`,
                         DespatchDate)),
              by = c("CartonNo","Container Number")) 
  
  AggResult <- temp |>
    filter(!is.na(Season)) |>
    mutate(CartonNo = as.character(NA)) |>
    bind_rows(temp2 |> 
                mutate(PalletLabelNo = as.character(NA)))
  
  return(AggResult)
  
}         
#
# Generate list of distinct containers with gaps
#
DistinctContainers <- ContainerPalletMap2 |>
  left_join(JWMPalletID |>
              select(-c(PalletID)), 
            by = c("Container Number", "PalletLabelNo")) |>
  left_join(GraderBatches2025 |> 
              select(-c(`Packing site`)), 
            by = "GraderBatchID") |>
  filter(is.na(Season)) |>
  distinct(`Container Number`) |>
  pull(`Container Number`)
        
CorrectedContainers <- DistinctContainers |>
  map(~ApplyCorrections(.,ContainerPalletMap2,JWMPalletID,CartonReco)) |>
  bind_rows()
#
# remove corrected container numbers from the main list
#
ContainerPalletMap3 <- ContainerPalletMap2 |>
  filter(!(`Container Number` %in% DistinctContainers)) |>
  left_join(JWMPalletID |>
              select(-c(PalletID,PalletWeight)),
            by = c("Container Number", "PalletLabelNo")) |>
  mutate(CartonNo = as.character(NA)) |>
  bind_rows(CorrectedContainers)
################################################################################
#                             Now the VX data                                  #
################################################################################

#
# Small function to help parse the VX data
#
CPOParsing <- function(VX2025Repacking) {
  
  ContainerPO <- tibble(POCN = str_split(VX2025Repacking$PONOContainerNo,"&")) |>
    mutate(i = row_number()) |>
    unnest(cols = c(POCN)) |>
    group_by(i) |> 
    mutate(j = paste0("x", 1:n())) |> 
    spread(j, POCN) |>
    ungroup() |>
    mutate(x1 = data.frame(str_split(x1,"-", simplify = T)),
           x2 = data.frame(str_split(x2,"-", simplify = T)),
           x3 = data.frame(str_split(x3,"-", simplify = T))) |>
    unnest(cols = c(x1,x2,x3), names_sep = "-") |>
    rename(PONo1 = `x1-X1`,
           ContainerNo1 = `x1-X2`,
           PONo2 = `x2-X1`,
           ContainerNo2 = `x2-X2`,
           PONo3 = `x3-X1`,
           ContainerNo3 = `x3-X2`) |>
    select(-c(i)) |>
    mutate(across(.cols = c(ContainerNo1, ContainerNo2, ContainerNo3), ~if_else(. == "",NA,.)))
  
  return(ContainerPO)
  
}

VX2025Repacking <- read_csv("data/VXProductionReport20250728.csv", show_col_types = F) |>
  mutate(RepackDate = as.Date(RepackDate, "%d/%m/%Y"),
         `Inbound date` = as.Date(`Inbound date`, "%d/%m/%Y"),
         Activity = str_replace(Activity,"^\\?\\?",""),
         across(.cols = c(SecondaryFruitKgs:Efficiency), ~replace_na(.,0))) 

VX2025ParsedRepacking <- VX2025Repacking |>
  bind_cols(CPOParsing(VX2025Repacking)) |>
# filter to include only repacking (rework covered under a separate analysis)
  filter(Batch != 0,
         Activity == "repacking") |>
  select(-c(PONOContainerNo, PONo2, ContainerNo2, PONo3, ContainerNo3, DataRPINBatch, Date, Month,
            FGPalletNo,...34)) |>
  rename(CartonNo = PalletLabelNo,
         PONo = PONo1,
         ContainerNo = ContainerNo1) |>
#
# Individual adjustments
#
  mutate(CartonNo = str_replace(CartonNo, "\n$",""),
         ContainerNo = case_when(CartonNo %in% c("SF002526670001","SF002526670002") ~ "MNBU4511147",
                                 TRUE ~ ContainerNo),
         CartonNo = if_else(CartonNo == "10SF002566880002", "SF002566880002", CartonNo),
         CartonNo = if_else(CartonNo == "T2025032630019", "SF002522940001", CartonNo))
#
# Parse the entry wth the two carton numbers
#
con <- DBI::dbConnect(odbc::odbc(),    
                      Driver = "ODBC Driver 18 for SQL Server", 
                      Server = "abcrepldb.database.windows.net",  
                      Database = "ABCPackerRepl",   
                      UID = "abcadmin",   
                      PWD = "Trauts2018!",
                      Port = 1433
)

CartonNoKG <- DBI::dbGetQuery(con, getSQL("../InMarketPackingQuality/SQLfiles/CartonKG.sql"))

DBI::dbDisconnect(con)

tempVX <- VX2025ParsedRepacking |>
  filter(str_detect(CartonNo,"^.+/.+$|^.+/.+/.+$|^.+-.+$")) |>
  mutate(CartonNo = str_split(CartonNo,"/|-")) |>
  unnest(CartonNo) |>
  left_join(CartonNoKG, by="CartonNo") |>
  mutate(BinNetKg = KGWeight,
         JuiceKgs = as.numeric(JuiceKgs)) |>
  select(-c(KGWeight)) |>
  mutate(across(.cols = c(FGWeight,FGCartons,JuiceKgs,SecondaryFruitKgs,TallFruitKgs,FruitDirectlyDiscardedKgs), 
                ~if_else(FGWeight==lag(FGWeight) & FGWeight != 0.0,0.0,.)))
#
# Add the parsed fows back into the df
#
VX2025ParsedRepacking2 <- VX2025ParsedRepacking |>
# Remove the duplicate rows with multiple CartonNos 
  filter(!str_detect(CartonNo,"^.+/.+$|^.+/.+/.+$|^.+-.+$"),
         RawProductCode != "Juice Apple") |>
  mutate(JuiceKgs = as.numeric(JuiceKgs)) |>
# Reinsert the parsed rows where the duplicate CaronNo have been split on to different rows
  bind_rows(tempVX) |>
# Create another Column the recognises PalletLabelNos as well as CartonNos
  mutate(PalletLabelNo = if_else(str_detect(CartonNo,"^0039"),CartonNo,NA),
         CartonNo = if_else(str_detect(CartonNo,"^0039"),NA,CartonNo))



```


```{r}
#| label: FirstTableDataCleaning

PackedForRepackingSummary <- PackedForRepacking |>
  group_by(`Packing site`,`Pack type`,Product) |>
  summarise(NoOfUnits = sum(NoOfUnits, na.rm=T),
            .groups = "drop")

PFRSummaryExportBins <- PackedForRepackingSummary |>
  filter(`Pack type` == "Export Bin") |>
  pivot_wider(id_cols = Product,
              names_from = `Packing site`,
              values_from = NoOfUnits,
              values_fill = 0) |>
  mutate(Total = `Sunfruit Limited` + `Te Ipu Packhouse (RO)`)

PFRSummaryExportBinsTotal <- PFRSummaryExportBins |>
  summarise(across(.cols = c(`Sunfruit Limited`:Total), ~sum(., na.rm=T))) |>
  mutate(Product = "Total") |>
  relocate(Product, .before = `Sunfruit Limited`)

PFRSummaryNonExportBins <- PackedForRepackingSummary |>
  filter(`Pack type` != "Export Bin",
         Product != "Rockit Apple GN ZPk 58mm") |>
  pivot_wider(id_cols = c(`Pack type`, Product),
              names_from = `Packing site`,
              values_from = NoOfUnits,
              values_fill = 0) |>
  mutate(Total = `Sunfruit Limited` + `Te Ipu Packhouse (RO)` + `Kiwi crunch (FV)`,
         `Pack type` = if_else(`Pack type` == "Tri Post Carton", "MB Format",`Pack type`)) |>
  arrange(`Pack type`)

PFRSummaryNonExportBinsTotal <- PFRSummaryNonExportBins |>
  summarise(across(.cols = c(`Kiwi crunch (FV)`:Total), ~sum(., na.rm=T))) |>
  mutate(`Pack type` = "Total",
         Product = "") |>
  relocate(Product, .before = `Kiwi crunch (FV)`) |>
  relocate(`Pack type`, .before = Product)



```

# Executive Summary
**Key Findings for Board & Senior Leadership**

RPC initiated in-market packing operations in China through Joy Wing Mau (JWM) and VX Logistics to address **local capacity constraints** and **delay capital expansion** requirements in New Zealand, while building strategic capability in key markets for supply chain resilience.

## Four Critical Strategic Points

### 1. **Partner performance gap Requires Immediate Action**
**Joy Wing Mau significantly outperforms VX Logistics** 
* JWM total yield: **62.8%** vs VX: **55.5%** (7.3% point advantage) 
* JWM secondary packout: **72.6%** vs VX: **65.8%** 
* **Recommendation:** Review VX performance relative to JWM 

### 2. **Quality issues threaten brand integrity**
**Mechanical damage nearly doubled during in-market processing** 
* Primary packing damage: **9.52%** and Secondary packing damage: **18.28%** 
* Potential root causes: double handling inherent in the in-market model, susceptibility of the fruit given the low pressure year, relative under-grading at Sunfruit compared to Te Ipu. 
* **Recommendation:** Implement immediate quality protocols across the supply chain or risk a decline in losses and customer satisfaction. 

### 3. **Packhouse Performance Disparity Impacts profitability of in-market operation** 
**Te Ipu consistently outperforms Sunfruit across all quality metrics** 
* Te Ipu secondary packout: **70.8%** vs Sunfruit: **63.8%** (7.0% advantage) 
* Calyx burn defects: Sunfruit **6.04%** vs Te Ipu **1.06%** 
* Mechanical defects: Sunfruit **19.28%** vs Te Ipu **13.71%** 
* **Recommendation:** Operations and investigate and address Sunfruit quality issues. A commercial analysis should be conducted to assess the viaility of in-market packet and the break-even points with regard to yield expectations. 

### 4. **Transit pack format innovation shows strategic promise** 
**MB format cartons deliver superior performance over traditional export bins** 
* MB Format secondary packout: **84.5%** vs Export Bins: **70.8%** (13.7% improvement) 
* Statistical significance confirmed across all trials 
* Limited 
* **Recommendation:** Accelerate MB format trials and scale 

In-market packing successfully addresses capacity constraints but requires immediate optimisation to protect product quality and brand reputation. Focus on improving the Sunfruit and VX performance, quality improvements across the supply chain to support these ends, and continue to identify and scale format innovations.

{{< pagebreak >}}


## Introduction

In 2024 RPC began exploring in market packing options in China; initially with Joy Wing Mau (JWM, existing distributor) and later with VX Logistics (part of the Vanke Co. Ltd and hereinafter referred to as VX). While commercial in-market packing occurred in 2024 the scale was relatively small.

The motivation for in-market packing was two-fold: primarily to mitigate local (NZ) packing capacity constraints and to delay and potentially offset the requirement for capital expansion in the New Zealand packing operation. A second reason is to grow the strategic capability to pack in key markets to allow local flexibility and protect against supply chain risks.

A critical issue with in-market packing is that the fruit is handled twice before it is packed into finished goods packaging. Rockit™ apples have traditionally have been particularly susceptible to mechanical damage (brusies, punctures and cuts) moreover the relatively high surface area to volume ratio of the Rockit™ apple make the fruit prone to shrivel later in the season.

The aim of this report is to summerise the In-market packing performance (hitherto including Joy Wing Mau and VX), and present the information in a way to provide the reader insights into production and quality performance.  Some recommendations will be given if the insights are clear and unequivocal. 

This report uses production data from VX and Joy Wing Mau published on the `r format(VXReportDate, "%d %B %Y")` and `r format(JWMReportDate, "%d %B %Y")` respectively.  The VX defect data was taken from the defect report published on `r format(VXDefectReportDate, "%d %B %Y")`.

## Scale of In-market packing in 2025

### Bins packed

At the time of this report being published (`r format(Sys.Date(), "%d %B %Y")`) `r scales::comma(PFRSummaryExportBinsTotal[[1,4]],1.0)` export bins had been packed in New Zealand.  A breakdown of the bins by type is given in @tbl-BinsPackedYTD.  @tbl-NonExpBinsPackedYTD shows the number of non-export bin repack formats that have been produced in New Zealand YTD.  These inlcude both z-packs and the newly trialled MB format carton.


```{r}
#| label: tbl-BinsPackedYTD
#| tbl-cap: "Export bins packed, 2025 YTD by size profile"

PFRSummaryExportBins |>
  bind_rows(PFRSummaryExportBinsTotal) |>
  flextable::flextable() |>
  flextable::autofit() |>
  flextable::hline(i=6) |>
  flextable::add_header_row(values = c("","Export bins"),
                            colwidths = c(1,3),
                            top = TRUE) |>
  flextable::align(align = "center", part = "header") |>
  flextable::bold(i=7, bold = TRUE) |>
  flextable::bold(bold = TRUE, part = "header") |>
  flextable::fontsize(size = 10, part="all") |>
  flextable::fit_to_width(max_width = 6)


```

```{r}
#| label: tbl-NonExpBinsPackedYTD
#| tbl-cap: "Non-Export bin repack formats, packed 2025 YTD by size profile"

PFRSummaryNonExportBins |>
  bind_rows(PFRSummaryNonExportBinsTotal) |>
  flextable::flextable() |>
  flextable::hline(i=nrow(PFRSummaryNonExportBins)) |>
  flextable::add_header_row(values = c("","Cartons"),
                            colwidths = c(2,4),
                            top = TRUE) |>
  flextable::align(align = "center", part = "header") |>
  flextable::bold(i=nrow(PFRSummaryNonExportBins)+1, bold = TRUE) |>
  flextable::bold(bold = TRUE, part = "header") |>
  flextable::merge_v(j=1) |>
  flextable::valign(j=1, valign="top") |>
  flextable::fontsize(size = 8, part = "all") |>
  flextable::autofit() |>
  flextable::fit_to_width(max_width = 6)

```

```{r}
#| label: BinShippedDataCleaning

Shippedtemp <- ShippedForRepacking |>
  group_by(`Destination port`,CompanyName,`Pack type`,Product) |>
  summarise(NoOfUnits = sum(NoOfUnits),
            `Pallet qty` = sum(`Pallet qty`),
            .groups = "drop") |>
  mutate(Repacker = case_when(CompanyName == "Pomina Enterprise Co., Ltd." ~ "Pomina",
                              CompanyName == "JOY WING MAU FRUIT TECHNOLOGIES CORPORATION LIMITED " ~ "Joy Wing Mau",
                              CompanyName == "Rockit Trading (Shanghai) Company Limited" ~ "VX",
                              TRUE ~ "other")) 

ExportBinSummary <- Shippedtemp |>
  filter(`Pack type` == "Export Bin") |>
  group_by(Repacker,Product) |>
  summarise(NoOfUnits = sum(NoOfUnits),
            .groups = "drop") |>
  rename(`Bin qty` = NoOfUnits) |>
  pivot_wider(id_cols = Product,
              names_from = Repacker,
              values_from = `Bin qty`,
              values_fill = 0) |>
  mutate(`Total export bins` = `Joy Wing Mau`+VX)

ExportBinSummaryTotal <- ExportBinSummary |>
  summarise(across(.cols = c(`Joy Wing Mau`:`Total export bins`),~sum(., na.rm=T))) |>
  mutate(Product = "Total") |>
  relocate(Product, .before = `Joy Wing Mau`)

ZPackSummary <- Shippedtemp |>
  filter(`Pack type` %in% c("Z Pack","Tri Post Carton"),
         Product != "Rockit Apple GN ZPk 58mm") |>
  group_by(Repacker,`Pack type`,Product) |>
  summarise(NoOfUnits = sum(NoOfUnits, na.rm=T),
            `Pallet qty` = sum(`Pallet qty`, na.rm=T),
            .groups  ="drop") |>
  rename(`Carton qty` = NoOfUnits) |>
  pivot_wider(id_cols = c(Product,`Pack type`),
              names_from = Repacker,
              values_from = c(`Pallet qty`,`Carton qty`),
              values_fill = 0) |>
  relocate(`Pack type`, .before = Product) |>
  arrange(`Pack type`)

ZPackSummaryTotal <- ZPackSummary |>
  summarise(across(.cols = c(`Pallet qty_Joy Wing Mau`:`Carton qty_VX`), ~sum(.,na.rm=T))) |>
  mutate(`Pack type` = "Total",
         Product = "") |>
  relocate(Product, .before = `Pallet qty_Joy Wing Mau`) |>
  relocate(`Pack type`, .before = Product)
```

### Bins shipped

The number of bins and cartons shipped to in-market repackers is given in tables [-@tbl-ExportBinsShippedYTD] and [-@tbl-NonExportBinsShippedYTD] is split by Repacker and size profile. As of the `r format(Sys.Date(),"%d %B %Y")` the number of export bins shipped to repackers was `r scales::comma(ExportBinSummaryTotal[[1,4]],1.0)`.  In terms of Non-export bin repack formats `r scales::comma(ZPackSummaryTotal[[1,6]]+ZPackSummaryTotal[[1,7]]+ZPackSummaryTotal[[1,8]],1.0)` cartons have been shipped YTD for 2025.

Note the `r scales::comma(ZPackSummaryTotal[[1,7]],1.0)` cartons (3 containers) that have been shipped to Pomina in Taiwan as a trial.  This is in addition to the two repackers used in P.R.China.

```{r}
#| label: tbl-ExportBinsShippedYTD
#| tbl-cap: "Export bins shipped 2025 YTD, by repacker and size profile"

ExportBinSummary |>
  bind_rows(ExportBinSummaryTotal) |>
  flextable::flextable() |>
  flextable::autofit() |>
  flextable::hline(i=5) |>
  flextable::bold(i=6, bold = TRUE) |>
  flextable::bold(bold = TRUE, part = "header") |>
  flextable::fontsize(size = 10, part = "all") |>
  flextable::fit_to_width(max_width = 6)

```

```{r}
#| label: tbl-NonExportBinsShippedYTD
#| tbl-cap: "Non-export bin repack formats shipped YTD by repacker and size profile"

ZPackSummary |>
  mutate(`Pack type` = if_else(`Pack type` == "Tri Post Carton", "MB Format",`Pack type`)) |>
  bind_rows(ZPackSummaryTotal) |>
  flextable::flextable() |>
  flextable::separate_header() |>
  flextable::merge_v(j=1) |>
  flextable::valign(j=1, valign="top") |>
  flextable::hline(i=nrow(ZPackSummary)) |>
  flextable::bold(i=nrow(ZPackSummary)+1, bold = TRUE) |>
  flextable::bold(bold = TRUE, part = "header") |>
  flextable::fontsize(size=8, part="all") |>
  flextable::autofit() |>
  flextable::fit_to_width(max_width = 6)

```



## Packout summaries

Tables [-@tbl-VXPackoutSummaries] and [-@tbl-JWMPackoutSummaries] show the primary and secondary packouts, and total yield (i.e. yield of fruit packed into finished products as a proportion of harvested fruit).  These are calculated on a weighted average basis.  The table also defines four storage phases:

1.	Field bins storage days (i.e. date harvested to the date of primary packing in NZ)
2.	Finished goods storage (i.e. the date from primary packing until the finished goods are shipped)
3.	Transit days (i.e. the date from shipping to the arrival date at the destination port) 
4.  Repack storage days (i.e. the arrival date at the port to the date of repacking)

While tables [-@tbl-VXPackoutSummaries] and [-@tbl-JWMPackoutSummaries] presents the weighted mean values these are useful as predictor variables when attempting to estimate final yields.

```{r}
#| label: tbl-VXPackoutSummaries
#| tbl-cap: "Packout summary for fruit processed at VX (as of 28 Jul 2025)"

# Tidying up GBD mapping
#
CTGMSummary <- ContainerToGBDMapping |>
  filter(Season == 2025) |>
  left_join(GraderBatches2025 |>
              select(-c(`Packing site`)), 
            by="GraderBatchID") |>
  mutate(FGStorageDaysNZ = as.numeric(DespatchDate-PackDate),
         TransitDays = as.numeric(ArrivalDate-DespatchDate)) |>
  select(c(ContainerNo,CartonNo,PalletLabelNo,`Pack type`,KGWeight,`Packing site`,
           Packout,FBStorageDays,FGStorageDaysNZ,TransitDays,PackDate,DespatchDate,ArrivalDate)) 
#
# Final integrated data frame
#
# First separate out the export bins and the palletised product (i.e. MB)
#
VXABCRecoEB <- VX2025ParsedRepacking2 |>
  filter(!is.na(CartonNo)) |>
  select(-c(PalletLabelNo)) |>
  left_join(CTGMSummary, by = c("CartonNo","ContainerNo")) |>
  mutate(RPStorageDays = as.integer(RepackDate-ArrivalDate))
#
# Need to aggregate by palletLabelNo
#
CTGMSum2 <- CTGMSummary |>
  group_by(PalletLabelNo) |>
  summarise(`Pack type` = max(`Pack type`, na.rm=T),
            `Packing site` = max(`Packing site`, na.rm=T),
            Packout = weighted.mean(Packout, KGWeight, na.rm=T),
            FBStorageDays = weighted.mean(FBStorageDays,KGWeight,na.rm=T),
            FGStorageDaysNZ = weighted.mean(FGStorageDaysNZ,KGWeight, na.rm=T),
            PackDate = weighted.mean(PackDate,KGWeight, na.rm=T),
            DespatchDate = weighted.mean(DespatchDate,KGWeight, na.rm=T),
            ArrivalDate = weighted.mean(ArrivalDate,KGWeight, na.rm=T),
            KGWeight = sum(KGWeight, na.rm=T))
#
# Now integrate the Palletised product
#
VXABCRecoPL <- VX2025ParsedRepacking2 |>
  filter(!is.na(PalletLabelNo)) |>
  left_join(CTGMSum2, by = c("PalletLabelNo")) |>
  mutate(TransitDays = as.numeric(ArrivalDate-DespatchDate),
         RPStorageDays = as.numeric(RepackDate-ArrivalDate)) |>
  relocate(KGWeight, .after = `Pack type`)
#
# bind the pallet and export bin entries together
#
VXABCReco <- VXABCRecoEB |>
  bind_rows(VXABCRecoPL)

BinPalletNo <- VXABCReco |>
  ungroup() |>
  mutate(CartonNo = if_else(is.na(CartonNo),PalletLabelNo,CartonNo)) |>
  distinct(`Packing site`, `Pack type`, CartonNo) |>       
  group_by(`Packing site`,`Pack type`) |>
  summarise(NoOfBins = n())  

#
# Doing a tally pf the distinct bins
#
BinPalletNo <- VXABCReco |>
  ungroup() |>
  mutate(CartonNo = if_else(is.na(CartonNo),PalletLabelNo,CartonNo)) |>
  distinct(`Packing site`, `Pack type`, CartonNo) |>       
  group_by(`Packing site`,`Pack type`) |>
  summarise(NoOfBins = n(),
            .groups = "drop")  

VXABCRecoSummary <- VXABCReco |>
  group_by(Batch,`Packing site`,`Pack type`) |>
  summarise(NoOfBins = n(),
            FBStorageDays = weighted.mean(FBStorageDays,BinNetKg, na.rm=T),
            FGStorageDaysNZ = weighted.mean(FGStorageDaysNZ,BinNetKg, na.rm=T),
            TransitDays = weighted.mean(TransitDays,BinNetKg, na.rm=T),
            RPStorageDays = weighted.mean(RPStorageDays,BinNetKg, na.rm=T),
            PrimaryPackout = weighted.mean(Packout,BinNetKg, na.rm=T),
            PackDate = weighted.mean(PackDate, BinNetKg, na.rm=T),
            SecInputKgs = sum(BinNetKg, na.rm=T),
            SecondaryFruitKgs = sum(SecondaryFruitKgs, na.rm=T),
            FruitDirectlyDiscardedKgs = sum(FruitDirectlyDiscardedKgs, na.rm=T),
            .groups = "drop") |>
  mutate(RejectKgs = SecondaryFruitKgs+FruitDirectlyDiscardedKgs,
         SecondaryPackout = 1-RejectKgs/SecInputKgs,
         TotalYield = PrimaryPackout*SecondaryPackout) |>
  filter(!(Batch %in% c(351,363))) 

##################################################################################################
#                             This is the bin/pallet tally table                                 #
##################################################################################################

NoOfBinsTot <- BinPalletNo |> 
  ungroup() |> 
  summarise(NoOfBins = sum(NoOfBins))

VXPopSummary <- VXABCReco |>
  filter(!(Batch %in% c(351,363))) |>
  summarise(FBStorageDays = weighted.mean(FBStorageDays,BinNetKg, na.rm=T),
            FGStorageDaysNZ = weighted.mean(FGStorageDaysNZ,BinNetKg, na.rm=T),
            TransitDays = weighted.mean(TransitDays,BinNetKg,na.rm=T),
            RPStorageDays = weighted.mean(RPStorageDays,BinNetKg,na.rm=T),
            PrimaryPackout = weighted.mean(Packout,BinNetKg, na.rm=T),
            SecInputKgs = sum(BinNetKg, na.rm=T),
            SecondaryFruitKgs = sum(SecondaryFruitKgs, na.rm=T),
            FruitDirectlyDiscardedKgs = sum(FruitDirectlyDiscardedKgs, na.rm=T)) |>
  mutate(RejectKgs = SecondaryFruitKgs+FruitDirectlyDiscardedKgs,
         SecondaryPackout = 1-RejectKgs/SecInputKgs,
         TotalYield = PrimaryPackout*SecondaryPackout) |>
  select(-c(SecondaryFruitKgs,FruitDirectlyDiscardedKgs,RejectKgs,SecInputKgs)) |>
  mutate(`Packing site` = "Total",
         `Pack type`="",
         NoOfBins = NoOfBinsTot[[1,1]]) |>
  relocate(NoOfBins, .before = FBStorageDays) |>
  relocate(`Packing site`, .before=NoOfBins) |>
  relocate(`Pack type`, .after=`Packing site`)

VXPackSiteSummary <- VXABCReco |>
  filter(!(Batch %in% c(351,363))) |>
  group_by(`Packing site`,`Pack type`) |>
  summarise(FBStorageDays = weighted.mean(FBStorageDays,BinNetKg, na.rm=T),
            FGStorageDaysNZ = weighted.mean(FGStorageDaysNZ,BinNetKg, na.rm=T),
            TransitDays = weighted.mean(TransitDays,BinNetKg, na.rm=T),
            RPStorageDays = weighted.mean(RPStorageDays,BinNetKg,na.rm=T),
            PrimaryPackout = weighted.mean(Packout,BinNetKg, na.rm=T),
            SecInputKgs = sum(BinNetKg, na.rm=T),
            SecondaryFruitKgs = sum(SecondaryFruitKgs, na.rm=T),
            FruitDirectlyDiscardedKgs = sum(FruitDirectlyDiscardedKgs, na.rm=T),
            .groups = "drop") |>
  mutate(RejectKgs = SecondaryFruitKgs+FruitDirectlyDiscardedKgs,
         SecondaryPackout = 1-RejectKgs/SecInputKgs,
         TotalYield = PrimaryPackout*SecondaryPackout) |>
  select(-c(SecondaryFruitKgs,FruitDirectlyDiscardedKgs,RejectKgs,SecInputKgs)) |>
  left_join(BinPalletNo, by = c("Packing site","Pack type")) |>
  relocate(NoOfBins, .after = `Pack type`) |>
  bind_rows(VXPopSummary) 

VXPackSiteSummary |>
  mutate(`Pack type` = if_else(`Pack type`=="Tri Post Carton","MB Format",`Pack type`),
         NoOfBins = scales::comma(NoOfBins,1.0),
         across(.cols = c(FBStorageDays:RPStorageDays), ~round(.,1)),
         across(.cols = c(PrimaryPackout:TotalYield), ~scales::percent(.,0.1))) |>
  rename(`Bins or pallets`= NoOfBins,
         `Field bins` = FBStorageDays,
         `Finished goods` = FGStorageDaysNZ,
         Transit = TransitDays,
         Repack = RPStorageDays,
         Primary = PrimaryPackout,
         Secondary = SecondaryPackout,
         Total = TotalYield) |>
  flextable::flextable() |>
  flextable::align(j=c(3,10), align = "right", part = "body") |>
  flextable::align(j=c(1,2), align = "left", part = "body") |>
  flextable::align(align = "center", part = "header") |>
  flextable::add_header_row(values = c("","Storage days","Yield / %"),
                            colwidths = c(3,4,3)) |>
  flextable::fontsize(size=7,part="all") |>
  flextable::bold(bold = TRUE, part="header") |>
  flextable::hline(i=nrow(VXPackSiteSummary)-1) |>
  flextable::width(j=1, width=1.2) |>
  flextable::width(j=2, width=0.7) |>
  flextable::width(j=c(3:7,9), width=0.6) |>
  flextable::width(j=8, width=0.7) |>
  flextable::bold(i=nrow(VXPackSiteSummary), bold=TRUE) |>
  merge_v(j = 1) |> 
  valign(j = 1, valign = "top") |>
  flextable::fit_to_width(max_width = 6)
  


```


```{r}
#| label: tbl-JWMPackoutSummaries
#| tbl-cap: "Packout summary for fruit processed at Joy Wing Mau (as of 25 Jul 2025)"

ContainerPalletMapWithABC <- ContainerPalletMap3 |>
  left_join(GraderBatches2025 |> 
              select(-c(`Packing site`)), 
            by = "GraderBatchID") |>
  mutate(FGStorageDays = as.integer(DespatchDate - PackDate),
         TransitDays = as.integer(ArrivalDate-DespatchDate))


temp <- ContainerPalletMapWithABC |>
  group_by(RepackBatchID) |>
  summarise(`Repacking Date` = max(`Repacking Date`),
            `RM Code` = max(`RM Code`),
            `Count of CartonsBins` = max(`Count of CartonsBins`, na.rm=T),
            `Act FG KG` = max(`Act FG KG`),
            PrimaryPackout = weighted.mean(Packout, `Total Bin Weight KG`, na.rm=T),
            FBStorageDays = weighted.mean(FBStorageDays, `Total Bin Weight KG`, na.rm=T),
            FGStorageDays = weighted.mean(FGStorageDays, `Total Bin Weight KG`, na.rm=T),
            TransitDays = weighted.mean(TransitDays,`Total Bin Weight KG`, na.rm=T),
            ArrivalDate = weighted.mean(ArrivalDate, `Total Bin Weight KG`, na.rm=T),
            `Total Bin Weight KG` = max(`Total Bin Weight KG`, na.rm=T),
            `Packing site` = max(`Packing site`, na.rm=T),
            `Pallet type` = max(`Pallet type`, na.rm=T),
            `Pack type` = max(`Pack type`, na.rm=T)) |>
  mutate(SecondaryPackout = `Act FG KG`/`Total Bin Weight KG`,
         RPStorageDays = as.numeric(`Repacking Date` - ArrivalDate))

JWMSummaryStats <- temp |>
  filter(SecondaryPackout < 1.0) |>
  summarise(`Bins or cartons` = sum(`Count of CartonsBins`, na.rm=T),
            PrimaryPackout = weighted.mean(PrimaryPackout,`Total Bin Weight KG`, na.rm=T),
            FBStorageDays = weighted.mean(FBStorageDays, `Total Bin Weight KG`, na.rm=T),
            FGStorageDays = weighted.mean(FGStorageDays, `Total Bin Weight KG`, na.rm=T),
            TransitDays = weighted.mean(TransitDays, `Total Bin Weight KG`, na.rm=T),
            RPStorageDays = weighted.mean(RPStorageDays, `Total Bin Weight KG`, na.rm=T),
            `Total Bin Weight KG` = sum(`Total Bin Weight KG`, na.rm=T),
            `Act FG KG` = sum(`Act FG KG`, na.rm=T)) |>
  mutate(secondaryPackout = `Act FG KG`/`Total Bin Weight KG`,
         TotalYield = PrimaryPackout*secondaryPackout) |>
  select(-c(`Total Bin Weight KG`,`Act FG KG`)) |>
  mutate(`Packing site` = "Total",
         `Pack type` = "") |>
  relocate(`Packing site`, .before = `Bins or cartons`) |>
  relocate(`Pack type`, .after = `Packing site`) |>
  relocate(PrimaryPackout, .before = secondaryPackout)

JWMYieldStatsByPacker <- temp |>
  filter(SecondaryPackout < 1.0) |>
  group_by(`Packing site`,`Pack type`) |>
  summarise(`Bins or cartons` = sum(`Count of CartonsBins`, na.rm=T),
            PrimaryPackout = weighted.mean(PrimaryPackout,`Total Bin Weight KG`, na.rm=T),
            FBStorageDays = weighted.mean(FBStorageDays, `Total Bin Weight KG`, na.rm=T),
            FGStorageDays = weighted.mean(FGStorageDays, `Total Bin Weight KG`, na.rm=T),
            TransitDays = weighted.mean(TransitDays, `Total Bin Weight KG`, na.rm=T),
            RPStorageDays = weighted.mean(RPStorageDays, `Total Bin Weight KG`, na.rm=T),
            `Total Bin Weight KG` = sum(`Total Bin Weight KG`, na.rm=T),
            `Act FG KG` = sum(`Act FG KG`, na.rm=T),
            .groups = "drop") |>
  mutate(secondaryPackout = `Act FG KG`/`Total Bin Weight KG`,
         TotalYield = PrimaryPackout*secondaryPackout) |>
  select(-c(`Total Bin Weight KG`,`Act FG KG`)) |>
  relocate(PrimaryPackout, .before = secondaryPackout) |>
  bind_rows(JWMSummaryStats)

JWMYieldStatsByPacker |>
  mutate(`Bins or cartons` = scales::comma(`Bins or cartons`,1.0),
         across(.cols = c(FBStorageDays:RPStorageDays), ~round(.,1)),
         across(.cols = c(PrimaryPackout:TotalYield), ~scales::percent(.,0.1))) |>
  rename(`Field bins`=FBStorageDays,
         `Finished goods`=FGStorageDays,
         Transit = TransitDays,
         Repack = RPStorageDays,
         Primary = PrimaryPackout,
         Secondary = secondaryPackout,
         Total = TotalYield) |>
  flextable::flextable() |>
  flextable::align(j=c(3:10), align = "right", part = "body") |>
  flextable::align(align = "center", part = "header") |>
  flextable::add_header_row(values = c("","Storage days","Yield / %"),
                            colwidths = c(3,4,3)) |>
  flextable::fontsize(size=7,part="all") |>
  flextable::bold(bold = TRUE, part="header") |>
  flextable::hline(i=3) |>
  flextable::bold(i=4, bold = TRUE) |>
  flextable::width(j=1, width=1.2) |>
  flextable::width(j=c(3:7,9:10), width=0.6) |>
  flextable::width(j=8, width=0.7) |>
  merge_v(j = 1) |> 
  valign(j = 1, valign = "top") |>
  flextable::fit_to_width(max_width = 6)
  
```

@fig-VXPackouts and @fig-JWMPackouts show the same data for each repacking site but in histogram form. 

```{r}
#| label: fig-VXPackouts
#| fig-cap: "VX repack batches packout distribution"
#| fig-subcap:
#|  - "Secondary packout"
#|  - "Total yield"
#| layout-ncol: 2

VXABCRecoSummary |>
  ggplot(aes(SecondaryPackout)) +
  geom_histogram(aes(fill=`Packing site`), binwidth=0.02) +
  geom_vline(xintercept = VXPopSummary[[1,9]], linewidth = 1) +
  annotate("text", x=VXPopSummary[[1,9]]-0.025, y = 10.0, angle=90, hjust=0.5,size=3.5, 
           label = str_c("Secondary packout = ", scales::percent(VXPopSummary[[1,9]],0.1))) +
  labs(title = "VX Export Bins, 2025 repacking",
       subtitle = "Secondary Packout Distribution",
       x = "Secondary Packout / %",
       y = "Count") +
  scale_x_continuous(labels = scales::label_percent(1.0)) +
  theme(legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8))


VXABCRecoSummary |>
  ggplot(aes(TotalYield)) +
  geom_histogram(aes(fill=`Packing site`), binwidth=0.02) +
  geom_vline(xintercept = VXPopSummary[[1,10]], linewidth = 1) +
  annotate("text", x=VXPopSummary[[1,10]]-0.025, y = 12.5, angle=90, hjust=0.5,size=3.5,  
           label = str_c("mean yield = ", scales::percent(VXPopSummary[[1,10]],0.1))) +
  labs(title = "VX Export Bins, 2025 repacking", 
       subtitle = "Total yield Distribution",
       x = "Total yield / %",
       y = "Count") +
  scale_x_continuous(labels = scales::label_percent(1.0)) +
  theme(legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8))




```
```{r}
#| label: fig-JWMPackouts
#| fig-cap: "Joy Wing Mau repack batches packout distribution"
#| fig-subcap:
#|  - "Secondary packout"
#|  - "Total yield"
#| layout-ncol: 2

temp |>
  mutate(OverallYield = PrimaryPackout*SecondaryPackout) |>
  filter(SecondaryPackout < 1.0) |>
  ggplot(aes(SecondaryPackout)) +
  geom_histogram(aes(fill = `Packing site`), binwidth = 0.03) +
  geom_vline(xintercept = JWMSummaryStats[[1,9]], linewidth = 1) +
  annotate("text", x=JWMSummaryStats[[1,9]]-0.015, y=5, angle = 90, hjust=0, size=3.5,
           label = str_c("mean secondary packout = ", scales::percent(JWMSummaryStats[[1,9]],0.1)))+
  labs(title = "Joy Wing Mau - 2025 Repacking",
       x = "Secondary Packout / %",
       y = "Count") +
  scale_x_continuous(labels = scales::label_percent(1.0)) +
  theme(legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8))

temp |>
  mutate(OverallYield = PrimaryPackout*SecondaryPackout) |>
  filter(SecondaryPackout < 1.0) |>
  ggplot(aes(OverallYield)) +
  geom_histogram(aes(fill = `Packing site`), binwidth = 0.03) +
  geom_vline(xintercept = JWMSummaryStats[[1,10]], linewidth = 1) +
  annotate("text", x=JWMSummaryStats[[1,10]]-0.015, y=5, angle = 90,hjust = 0, size = 3.5,
           label = str_c("mean total yield = ", scales::percent(JWMSummaryStats[[1,10]],0.1)))+
  labs(title = "Joy Wing Mau - 2025 Repacking",
       x = "Total yield / %",
       y = "Count") +
  scale_x_continuous(labels = scales::label_percent(1.0)) +
  theme(legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8))

```
Note that for both the VX and JWM secondary packouts (figures [-@fig-VXPackouts-1] and [-@fig-JWMPackouts-1]) there is a visible bias of Te Ipu fruit positioned to the right of the mean (as indicated by the black vertical line).  In terms of the total yield (figures [-@fig-VXPackouts-2] and [-@fig-JWMPackouts-2]) the distribution of Te Ipu fruit appears more centred around the mean value.  This can be explained by understanding that the Te Ipu fruit is manually, as well as machine graded and hence, generally has a lower primary packout than the equivalent Sunfruit batch.  This is balanced out in the total yield after a secondary grading step.

## Preliminary comparison of export bins vs MB formats for fruit packed at VX

A container of Rockit™ apple was shiped to VX from Te Ipu that had been packed in MB format cartons on 30 April 2025. These pallets were repacked at VX into finished goods (63/3 and 63/3T tubes) on 04 June 2025.  A further 16 pallets of z-pack cartons (containing 63T fruit)  were processed at VX on 07 Jul 2025.  A summary of each consignment is given in @tbl-VXPackoutSummaries.  In terms of the distribution of the secondary packouts,  these are presented in @fig-MBvsEBDist  

```{r}
#| label: fig-MBvsEBDist
#| fig-cap: "distribution of batches packed at VX YTD (i.e. as of 28 July 2025). The histogram presents a comparison between export bins and MB formats"
#| ig-align: center
#| out-width: 96%
#| fig-asp: 1.0

VXEBTot <- VXABCRecoSummary |>
  ungroup() |>
  filter(Batch != 363,
         `Pack type`== "Export Bin") |>
  summarise(SecondaryPackout = weighted.mean(SecondaryPackout, NoOfBins, na.rm=T))

VXMBTot <- VXABCRecoSummary |>
  ungroup() |>
  filter(Batch != 363,
         `Pack type`== "Tri Post Carton") |>
  summarise(SecondaryPackout = weighted.mean(SecondaryPackout, NoOfBins, na.rm=T))

VXZPTot <- VXABCRecoSummary |>
  ungroup() |>
  filter(Batch != 363,
         `Pack type`== "Z Pack") |>
  summarise(SecondaryPackout = weighted.mean(SecondaryPackout, NoOfBins, na.rm=T))

VXABCRecoSummary |>
  ungroup() |>
  mutate(`Pack type` = if_else(`Pack type` == "Tri Post Carton",
                               "MB format",
                               `Pack type`)) |>
  ggplot(aes(SecondaryPackout)) +
  geom_histogram(aes(fill=`Pack type`), binwidth=0.02) +
  geom_vline(xintercept = VXEBTot[[1,1]], linewidth = 1) +
  geom_vline(xintercept = VXMBTot[[1,1]], linewidth = 1) +
  geom_vline(xintercept = VXZPTot[[1,1]], linewidth = 1) +
  annotate("text", x=VXEBTot[[1,1]]-0.02, y = 12.5, angle=90, hjust=0.5,size=3.5, 
           label = str_c("Export bin mean secondary packout = ", scales::percent(VXEBTot[[1,1]],1.0))) +
  annotate("text", x=VXMBTot[[1,1]]+0.02, y = 12.5, angle=-90, hjust=0.5,size=3.5,
           label = str_c("MB format mean secondary packout = ", scales::percent(VXMBTot[[1,1]],1.0))) +
  annotate("text", x=VXZPTot[[1,1]]-0.02, y = 12.5, angle=90, hjust=0.5,size=3.5,
           label = str_c("Z-pack mean secondary packout = ", scales::percent(VXZPTot[[1,1]],1.0))) +
  labs(title = "VX Secondary packout",
       x = "Secondary packout / %") +
  scale_x_continuous(labels = scales::label_percent(1.0)) +
  theme(legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8))

```


## Preliminary comparison of Export Bin vs Z-pack cartons for fruit already packed at Joy Wing Mau

Two small batches of 72mm fruit were repacked at JWM from z-packs in 2025.  This is presented in @fig-JWMZPacks as function of secondary packout and in histogram form.  This clearly shows that the z-packs deliver a higher secondary packout than the export bins.  This result, however should be treated with caution as the sample of z-packs was relatively small (707 cartons) compared to the mass of fruit in export bins.  More boxed fruit will be processed at VX and Joy Wing Mau and the results will be analyses to see if the difference in overall yield is maintained.


```{r}
#| label: fig-JWMZPacks
#| fig-cap: "Joy Wing Mau Secondary packout distribution showing packing format (z-pack vs export bin)"
#| fig-align: center
#| out-width: 96%
#| fig-asp: 1.0

temp |>
  mutate(OverallYield = PrimaryPackout*SecondaryPackout) |>
  filter(SecondaryPackout < 1.0) |>
  ggplot(aes(SecondaryPackout)) +
  geom_histogram(aes(fill = `Pallet type`), binwidth = 0.03) +
  geom_vline(xintercept = JWMSummaryStats[[1,9]], linewidth = 1) +
  annotate("text", x=JWMSummaryStats[[1,9]]-0.015, y=25, angle = 90, size=3.5,
           label = str_c("mean secondary packout = ", scales::percent(JWMSummaryStats[[1,9]],0.1)))+
  labs(title = "Joy Wing Mau, 2025 Repacking",
       subtitle = "",
       x = "Secondary Packout / %") +
  scale_x_continuous(labels = scales::label_percent(1.0)) +
  theme(legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8))

```

## Defect Profile for VX fruit

VX have implemented a relatively sophisticated defect logging system.  The defect profile observed at VX during the repacking operation is summarized in @fig-VXdefects. The most significant difference in the primary and secondary packing defects is the increase in mechanical damage (Punctures, cut and bruising) 19.28% at VX vs approximately 13.71% at primary packout at Te Ipu.  Calyx burn is another serious disorder (typically caused by lesions in the waxy cuticle around the calyx and exposure to a strong oxidant [e.g. hypochlorite] during the bin tip process).  The concentration of disinfectatnt has been lowered as a result of the observed high incidence.  Stem tears are another unusual defect (3.37% at VX compared to 1.82% at Te Ipu).  Presumably Sunfruit has no capability to grade out fruit with the stems removed and hence they are being graded out at the repacking facility.  The last disorder to comment on is shrivel, which is a latent condition and is not observed at Te Ipu and yet makes up 1.12% of the crop.  This will need to be monitored as the season progresses.



```{r}
#| label: fig-VXdefects
#| fig-cap: "Defect profile for fruit repacked at VX YTD 2025 (until 28 July 2025).  Only the top 10 defects are presented for clarity"
#| fig-align: center
#| out-width: 96%
#| fig-asp: 1.0

VXDefects <- read_csv("data/VXDefectReport20250728.csv", show_col_types = F) |>
  select(-c(ID,Seconds,Technician,SampleType,ContainerNo,SampType,RawMaterialName,
            Mechanical,Cosmetic,TotalDefects,ExportFruit,GoodFruit,Comments,
            DateRPINBatch,Key,Date,SpoiltSummary,CosmeticSummary,Month)) |>
  mutate(AssessmentDate = as.Date(AssessmentDate, "%d/%m/%Y"),
         AssessmentDateTime = as.POSIXct(AssessmentDateTime, "%d/%m/%Y %H:%M", tz="UTC"),
         `Punctures Cuts` = str_replace(`Punctures Cuts`,"#NAME\\?$|\\?$","0"),
         `Punctures Cuts` = as.integer(`Punctures Cuts`),
         `Mouldy stalk` = as.integer(`Mouldy stalk`),
         `Parrot beak` = str_replace(`Parrot beak`, "\\?+","0"),
         `Parrot beak` = as.integer(`Parrot beak`),
         across(.cols = c(Rots:Misshapen), ~replace_na(.,0)))

VXDefectSummary <- VXDefects |>
  filter(QualityInpector == "VX",
         SampleTypeEn == "The next time it was randomly checked",
         str_detect(Batch, "^\\d{3}$")) |>
  group_by(Batch) |>
  summarise(SampleQty = sum(SampleQty, na.rm=T),
            across(.cols = c(Rots:Misshapen), ~sum(., na.rm=T)),
            .groups = "drop") |>
  rowwise() |>
  mutate(DefectNo = sum(c_across(Rots:Misshapen), na.rm=T),
         `Export fruit` = SampleQty-DefectNo,
         Batch = as.numeric(Batch)) |>
  left_join(VXABCRecoSummary |>
              select(c(Batch, SecondaryPackout, `Packing site`,`Pack type`, PackDate)) |>
              mutate(Batch = as.numeric(Batch)),
            by = "Batch") |>
  filter(!is.na(SecondaryPackout)) |>
  ungroup() |>
  mutate(AssessmentID = row_number()) |>
  pivot_longer(cols = c(Rots:Misshapen,`Export fruit`),
               names_to = "Defect",
               values_to = "DefectQty") |>
  select(c(AssessmentID, Batch, SampleQty, DefectNo, SecondaryPackout, Defect, 
           DefectQty, `Packing site`,`Pack type`,PackDate)) |>
#
# Include the secondary packout from each batch
#
  mutate(DefectProp = (1-SecondaryPackout)*DefectQty/DefectNo,
         DefectPerc = scales::percent(DefectProp, 0.01))

DefectNoSummary <- VXDefectSummary |>
  group_by(Batch) |>
  summarise(DefectNo = first(DefectNo),
            .groups = "drop") |>
  summarise(DefectNo = sum(DefectNo))

SecondPOSummary <- VXABCRecoSummary |>
  ungroup() |>
  summarise(SecInputKgs = sum(SecInputKgs, na.rm=T),
            RejectKgs = sum(RejectKgs, na.rm=T)) |>
  mutate(SecondaryPackout = 1-RejectKgs/SecInputKgs)

Top10_DefectSummary <- VXDefectSummary |>
  group_by(Defect) |>
  summarise(DefectQty = sum(DefectQty)) |>
  mutate(DefectNo = DefectNoSummary[[1]],
         SecondaryPackout = SecondPOSummary[[1,3]],
         DefectProp = (1-SecondaryPackout)*DefectQty/DefectNo,
         DefectPerc = scales::percent(DefectProp, 0.01)) |>
  arrange(desc(DefectProp)) |>
  mutate(Defect = fct_reorder(Defect, DefectProp)) |>
  slice_head(n=10)

Top10 <- Top10_DefectSummary |>
  pull(Defect)

Top10_DefectSummary |>
  ggplot(aes(x=Defect, y=DefectProp)) +
  geom_col(colour = "#48762e", fill = "#48762e", alpha = 0.6) +
  coord_flip() +
  geom_text(aes(label = DefectPerc, y = DefectProp+0.01), position = position_dodge(0.9), size=3.0) +
  scale_y_continuous("Defect as a proportion of population / %", labels = scales::label_percent(0.1)) +
  scale_fill_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  scale_colour_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  ggthemes::theme_economist() + 
  theme(legend.position = "top",
        axis.title.x = element_text(margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        axis.text.y = element_text(size = 10, hjust=1),
        axis.text.x = element_text(size = 10),
        plot.background = element_rect(fill = "#F7F1DF", colour = "#F7F1DF"),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 10),
        strip.text = element_text(margin = margin(b=10), size = 10))

```

### Defect profile by original packing site

@fig-VXdefectsByPackSite shows the difference in (secondary packout) defect profile between fruit originally packed Te Ipu and Sunfruit.  There are two striking differences between the two profiles: fistly the greater level of mechanical damage from Sunfruit compared to Te Ipu.  This is across both the bruising and punctures/cuts categories.  The second major difference is in the level of Calyx burn, with Sunfruit recording 6.10% compared to Te Ipu at 1.07%. 


```{r}
#| label: fig-VXdefectsByPackSite
#| fig-cap: "Defect profile for fruit repacked at VX YTD 2025 (until 28 July 2025).  Only the top 10 defects are presented for clarity.  The defect profile is shown by original (primary) packing site"
#| fig-align: center
#| out-width: 96%
#| fig-asp: 1.1

DefectNoSummaryPS <- VXDefectSummary |>
  group_by(Batch,`Packing site`) |>
  summarise(DefectNo = first(DefectNo),
            .groups = "drop") |>
  group_by(`Packing site`) |>
  summarise(DefectNo = sum(DefectNo))

SecondPOSummaryPS <- VXABCRecoSummary |>
  ungroup() |>
  group_by(`Packing site`) |>
  summarise(SecInputKgs = sum(SecInputKgs, na.rm=T),
            RejectKgs = sum(RejectKgs, na.rm=T),
            .groups = "drop") |>
  mutate(SecondaryPackout = 1-RejectKgs/SecInputKgs)

Top10_DefectSummaryPS <- VXDefectSummary |>
  group_by(`Packing site`,Defect) |>
  summarise(DefectQty = sum(DefectQty),
            .groups = "drop") |>
  mutate(DefectNo = if_else(`Packing site` == "Sunfruit Limited", 
                            DefectNoSummaryPS[[1,2]],
                            DefectNoSummaryPS[[2,2]]),
         SecondaryPackout = if_else(`Packing site` == "Sunfruit Limited", 
                                    SecondPOSummaryPS[[1,4]],
                                    SecondPOSummaryPS[[2,4]]),
         DefectProp = (1-SecondaryPackout)*DefectQty/DefectNo,
         DefectPerc = scales::percent(DefectProp, 0.01)) |>
  arrange(desc(DefectProp)) |>
  mutate(Defect = fct_reorder(Defect, DefectProp)) 

Top10_DefectSummaryPS |>
  filter(Defect %in% Top10) |>
  ggplot(aes(x=Defect, y=DefectProp, fill=`Packing site`)) +
  geom_col(position = "dodge", alpha = 0.6) +
  coord_flip() +
  geom_text(aes(label = DefectPerc, y = DefectProp+0.008), position = position_dodge(0.9), size=2.5) +
  scale_y_continuous("Defect as a proportion of population / %", labels = scales::label_percent(0.1)) +
  scale_fill_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  scale_colour_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  ggthemes::theme_economist() + 
  theme(legend.position = "top",
        axis.title.x = element_text(margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        axis.text.y = element_text(size = 10, hjust=1),
        axis.text.x = element_text(size = 10),
        plot.background = element_rect(fill = "#F7F1DF", colour = "#F7F1DF"),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8),
        strip.text = element_text(margin = margin(b=10), size = 10))


```

### Defect profile by packing format

Recently MB format transit packs were repacked at VX.  The resulting defect profiles are compared in @fig-VXdefectsByPackType.  While only 20 pallets of MB Format cartons were repacked (compared to 1,729 export bins).  The difference in the defect profile however is notable.  There is a large difference in the level of mechanical damage across all measured categories with export bins exhibiting higher incidence of both bruising and punctures/cuts.  Interestingly Calyx burn is very similar across both formats (when considering all export bins).  Incidence of stem tears and cosmetic blemish are similarly fewer in the MB format compareed to export bins.  

#### Defect profile by packing format and primary packing site

Given that all of the orginal consignment of MB format fruit was packed at Te Ipu a more valid comparison of defect profile would be against only fruit that was orginaly packed at Te Ipu.^[Packing site is one of a number of variables that are expected to have an impact on the in-market packing performance.] Given this is a convenient analysis to perform it is presented in @fig-MBvsEXPForTI.  


```{r}
#| label: fig-VXdefectsByPackType
#| fig-cap: "Defect profile for fruit repacked at VX YTD 2025 (until 28 July 2025).  Only the top 10 defects are presented.  The profile is shown by transit pack format (i.e either export bin or MB format).  This plot include data from both packing sites"
#| fig-align: center
#| out-width: 96%
#| fig-asp: 1.1

DefectNoSummaryPT <- VXDefectSummary |>
  group_by(Batch,`Pack type`) |>
  summarise(DefectNo = first(DefectNo),
            .groups = "drop") |>
  group_by(`Pack type`) |>
  summarise(DefectNo = sum(DefectNo))

SecondPOSummaryPT <- VXABCRecoSummary |>
  ungroup() |>
  group_by(`Pack type`) |>
  summarise(SecInputKgs = sum(SecInputKgs, na.rm=T),
            RejectKgs = sum(RejectKgs, na.rm=T)) |>
  mutate(SecondaryPackout = 1-RejectKgs/SecInputKgs)

Top10_DefectSummaryPT <- VXDefectSummary |>
  group_by(`Pack type`,Defect) |>
  summarise(DefectQty = sum(DefectQty)) |>
  mutate(DefectNo = case_when(`Pack type` == "Export Bin" ~ DefectNoSummaryPT[[1,2]],
                              `Pack type` == "Tri Post Carton" ~ DefectNoSummaryPT[[2,2]],
                              `Pack type` == "Z Pack" ~ DefectNoSummaryPT[[3,2]]),
         SecondaryPackout = case_when(`Pack type` == "Export Bin" ~ SecondPOSummaryPT[[1,4]],
                                      `Pack type` == "Tri Post Carton" ~ SecondPOSummaryPT[[2,4]],
                                      `Pack type` == "Z Pack" ~ SecondPOSummaryPT[[3,4]]),
         DefectProp = (1-SecondaryPackout)*DefectQty/DefectNo,
         DefectPerc = scales::percent(DefectProp, 0.01)) |>
  arrange(desc(DefectProp)) |>
  mutate(Defect = fct_reorder(Defect, DefectProp)) 

Top10_DefectSummaryPT |>
  filter(Defect %in% Top10) |>
  mutate(`Pack type` = if_else(`Pack type`=="Tri Post Carton","MB format",`Pack type`)) |>
  ggplot(aes(x=Defect, y=DefectProp, fill=`Pack type`)) +
  geom_col(position = "dodge", alpha = 0.6) +
  coord_flip() +
  geom_text(aes(label = DefectPerc, y = DefectProp+0.008), position = position_dodge(0.9), size=2.2) +
  scale_y_continuous("Defect as a proportion of population / %", labels = scales::label_percent(0.1)) +
  scale_fill_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  scale_colour_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  ggthemes::theme_economist() + 
  theme(legend.position = "top",
        axis.title.x = element_text(margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        axis.text.y = element_text(size = 10, hjust=1),
        axis.text.x = element_text(size = 10),
        plot.background = element_rect(fill = "#F7F1DF", colour = "#F7F1DF"),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8),
        strip.text = element_text(margin = margin(b=10), size = 10))

```

```{r}
#| label: fig-MBvsEXPForTI
#| fig-cap: "Defect profile for fruit repacked at VX YTD 2025 (until 28 July 2025).  Only the top 10 defects are presented.  The profile is shown by transit pack format (i.e either export bin or MB format) and only presents fruit that was orginally packed at Te Ipu (i.e. excludes all Sunfruit export bins."
#| fig-align: center
#| out-width: 96%
#| fig-asp: 1.1


DefectNoSummaryTIPT <- VXDefectSummary |>
  filter(`Packing site` == "Te Ipu Packhouse (RO)") |>
  group_by(Batch,`Pack type`) |>
  summarise(DefectNo = first(DefectNo),
            .groups = "drop") |>
  group_by(`Pack type`) |>
  summarise(DefectNo = sum(DefectNo))

SecondPOSummaryTIPT <- VXABCRecoSummary |>
  ungroup() |>
  filter(`Packing site` == "Te Ipu Packhouse (RO)") |>
  group_by(`Pack type`) |>
  summarise(SecInputKgs = sum(SecInputKgs, na.rm=T),
            RejectKgs = sum(RejectKgs, na.rm=T)) |>
  mutate(SecondaryPackout = 1-RejectKgs/SecInputKgs)

Top10_DefectSummaryTIPT <- VXDefectSummary |>
  filter(`Packing site` == "Te Ipu Packhouse (RO)") |>
  group_by(`Pack type`,Defect) |>
  summarise(DefectQty = sum(DefectQty)) |>
  mutate(DefectNo = case_when(`Pack type` == "Export Bin" ~ DefectNoSummaryTIPT[[1,2]],
                              `Pack type` == "Tri Post Carton" ~ DefectNoSummaryTIPT[[2,2]],
                              `Pack type` == "Z Pack" ~ DefectNoSummaryTIPT[[3,2]]),
         SecondaryPackout = case_when(`Pack type` == "Export Bin" ~ SecondPOSummaryTIPT[[1,4]],
                                      `Pack type` == "Tri Post Carton" ~ SecondPOSummaryTIPT[[2,4]],
                                      `Pack type` == "Z Pack" ~ SecondPOSummaryTIPT[[3,4]]),
         DefectProp = (1-SecondaryPackout)*DefectQty/DefectNo,
         DefectPerc = scales::percent(DefectProp, 0.01)) |>
  arrange(desc(DefectProp)) |>
  mutate(Defect = fct_reorder(Defect, DefectProp)) 

Top10_DefectSummaryTIPT |>
  filter(Defect %in% Top10) |>
  mutate(`Pack type` = if_else(`Pack type`=="Tri Post Carton","MB format",`Pack type`)) |>
  ggplot(aes(x=Defect, y=DefectProp, fill=`Pack type`)) +
  geom_col(position = "dodge", alpha = 0.6) +
  coord_flip() +
  geom_text(aes(label = DefectPerc, y = DefectProp+0.01), position = position_dodge(0.9), size=2.2) +
  scale_y_continuous("Defect as a proportion of population / %", labels = scales::label_percent(0.1)) +
  scale_fill_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  scale_colour_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  ggthemes::theme_economist() + 
  theme(legend.position = "top",
        axis.title.x = element_text(margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        axis.text.y = element_text(size = 10, hjust=1),
        axis.text.x = element_text(size = 10),
        plot.background = element_rect(fill = "#F7F1DF", colour = "#F7F1DF"),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8),
        strip.text = element_text(margin = margin(b=10), size = 10))

```

## Statistical analysis of the effect of primary packing site and pack format on secondary packout for VX

While a more comprehensive regression analysis is desirable to understand the important variables that drive the secondary packout performance a simple two-factor analysis of variance (ANOVA) is run using secondary packout as the independent variable and primary pack site and pack format as the independent or predictor variable (note both variable are categorical).  The ANOVA is stated mathematically in @eq-ANOVA.

$$\upsilon_{ijk}^{2}=\mu+\alpha_{i}+\beta_{j}+\epsilon_{ijk}$$ {#eq-ANOVA}

Where:  

$\upsilon^{2}$ = secondary packout  
$\mu$ = weighted population average for the secondary packout  
$\alpha$ = the main effect for packing site  
$\beta$ = the main effect for pack format  
$\epsilon$ = the random error term  
$i$ = the number of levels of packing site (i.e. = 2, Te Ipu and Sunfruit)  
$j$ = the number of levels of pack formats (i.e. = 2, export bins and MB format)  
$k$ = the number of observations per treatment  

Using the provided VX data the results for the two-way ANOVA are given in @tbl-TwoWayANOVA:

```{r}
#| label: tbl-TwoWayANOVA
#| tbl-cap: "Results of a two-way ANOVA comparing original packing site and pack format with the secondary packout"

Model2Way <- lm(SecondaryPackout ~ `Packing site` + `Pack type`, 
                 data = VXABCRecoSummary, 
                 weights = SecInputKgs)

ANOVATemp <- broom::tidy(Model2Way) |>
  mutate(`Packing site` = c("Sunfruit", rep("Te Ipu",3)),
         `Pack type` = c("export bin", "export bin","MB format","Z pack"),
         across(.cols = c(estimate, `std.error`, statistic), ~round(.,3)),
         significance = case_when(`p.value` <= 0.05 & `p.value` > 0.01 ~ "*",
                                  `p.value` <= 0.01 & `p.value` > 0.001 ~ "**",
                                  `p.value` <= 0.001 ~ "***",
                                  TRUE ~ ""),
         `p.value` = scales::scientific(`p.value`)) 

ME <- tibble(`Mean secondary packout` = c(ANOVATemp$estimate[1],
                                          ANOVATemp$estimate[1]+ANOVATemp$estimate[2],
                                          ANOVATemp$estimate[1]+ANOVATemp$estimate[2]+ANOVATemp$estimate[3],
                                          ANOVATemp$estimate[1]+ANOVATemp$estimate[2]+ANOVATemp$estimate[4]))

ANOVATemp |>
  bind_cols(ME) |>
  select(-c(term,`std.error`,statistic, estimate)) |>
  relocate(`Mean secondary packout`, .after = `Pack type`) |>
  relocate(`p.value`, .after = `Mean secondary packout`) |>
  mutate(`Mean secondary packout`=scales::percent(`Mean secondary packout`, 0.01)) |>
  flextable::flextable() |>
  flextable::width(j=c(1,2,4), width = 1.0) |>
  flextable::align(j=c(3:4), align="right", part="all") |>
  flextable::footnote(i=1,j=5, value = flextable::as_paragraph("Significance level: P < 0.001 ***, 0.001 ≤ P < 0.01 **, 0.01 ≤ P < 0.05 *"), part = "header") |>
  flextable::fontsize(size = 8, part = "all") |>
  flextable::fontsize(size = 7, part = "footer") |>
  flextable::merge_v(j = 1) |> 
  flextable::valign(j = 1, valign = "top") |>
  flextable::fit_to_width(max_width = 6)
  


```

@tbl-TwoWayANOVA shows that both factors (Packing site and Pack format) are significant (i.e. the probability of the effect being zero is very small). There is a 6.5% improvement in secondary packout for fruit being primary packed at Te Ipu compared to Sunfruit.  Similarly for fruit packed in MB format cartons compared to export bins at Te Ipu there is an 8.0% improvement which is also significant.

It should, however, be noted that the Anova is very unbalanced with only a relatively small sample of fruit being processed in the MB format.  To some extent this is taken into account in the analysis and the result should be regarded as promising for the use of MB format cartons. 

## Analysis of calyx burn from different pack sites

Calyx burn is a defect that has not been historically prevalent in Rockit™ apples.  The disorder depends on the presence of micro-cracking around the calyx area of the apple combined with exposure to a strong oxidant such as hypochlorite (active ingredient in the disinfectant typically used in water dumps during the packing operation) [@lallu_studies_2010].  

When this disorder was identified changes were made to the concentration of the oxidant at both Sunfruit and Te Ipu packhouse in an attempt to mitigate the problem. The impact of the reduction in the incidence of calyx burn during the secondary ackout (at the VX facility in China) can be seen in the months of April and May (compared to March) in @fig-CalyxBurn. Relatively high levels of Calyx burn have been observed on batch that have were packed in late may.  The progression of Calyx burn will be monitored through out the season.

```{r}
#| label: fig-CalyxBurn
#| fig-cap: "Calyx burn incidence during secondary packing as a function of primary (NZ) pack date"
#| fig-align: center
#| out-width: 96%
#| fig-asp: 0.7


CalyxBurn <- VXDefectSummary |>
  filter(Defect == "Calyx burn")

CBModel <- lm(DefectProp ~ poly(PackDate, 2, raw=T)*`Packing site`, data = CalyxBurn) 

#summary(CBModel)

PredModel <- as_tibble(predict(CBModel, interval = "confidence"))

CalyxBurnMod <- CalyxBurn |>
  bind_cols(PredModel)

CalyxBurnMod |>
  ggplot(aes(PackDate, groups = `Packing site`)) +
  geom_jitter(aes(y = DefectProp, colour = `Packing site`)) +
  geom_line(aes(y = fit, colour = `Packing site`), linewidth=1) +
  geom_ribbon(aes(ymin=lwr, ymax=upr), fill="grey60", alpha = 0.3) +
  scale_y_continuous(labels = scales::label_percent(1.0)) +
  labs(x = "New Zealand Pack date",
       y = "Calyx burn defect proportion / %") +
  scale_fill_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  scale_colour_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  ggthemes::theme_economist() + 
  theme(legend.position = "top",
        axis.title.x = element_text(margin = margin(t = 10), size = 10),
        axis.title.y = element_text(margin = margin(r = 10), size = 10),
        axis.text.y = element_text(size = 10, hjust=1),
        axis.text.x = element_text(size = 10),
        plot.background = element_rect(fill = "#F7F1DF", colour = "#F7F1DF"),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8),
        strip.text = element_text(margin = margin(b=10), size = 10))
```
## Effect of packout on storage days

One of the main predictors of primary packout is storage days (in field bins).  Extrapolating this to the in-market packing the four phases of storage described above are plotted in the left-hand chart (by batch) for VX fruit in @fig-POVSSD. The right-hand chart shows the three packouts (primary, secondary and total yield) for each of the batches.  What can be seen is that the primary packout (this calculated on a weighted average basis for each batch) remains consistent over the range of storage days analysed.  Secondary packout begins relatively low then increases to when total storage days are between 60 and 70 and then begins decreasing as storage days increase.  From this analysis it is apparent that storage days is not the only predictor driving secondary packout.

```{r}
#| label: fig-POVSSD
#| fig-cap: "Total storage days as a function of batch for VX compared with primary, secondary and total yield for all batches run at VX in 2025"
#| fig-align: center
#| out-width: 96%
#| fig-asp: 1.3

VXABCRecoSummary_Long <- VXABCRecoSummary |>
  mutate(FGStorageDaysNZ = if_else(FGStorageDaysNZ < 0, 0, FGStorageDaysNZ),
         RPStorageDays = if_else(RPStorageDays < 0, 0, RPStorageDays)) |>
  select(c(Batch,FBStorageDays,FGStorageDaysNZ,TransitDays,RPStorageDays,
           PrimaryPackout,SecondaryPackout,TotalYield)) |>
  rename(`Field bins` = FBStorageDays,
         `Finished goods` = FGStorageDaysNZ,
         Transit = TransitDays,
         Repack = RPStorageDays) |>
  pivot_longer(cols = c(`Field bins`:Repack),
               names_to = "Storage phase",
               values_to = "days") |>
  mutate(`Storage phase` = factor(`Storage phase`, 
                                  levels = c("Repack","Transit","Finished goods","Field bins"))) 

VXABCRecoSumLong <- VXABCRecoSummary_Long |>
  group_by(Batch) |>
  summarise(TotalStorageDays = sum(days)) |>
  arrange(TotalStorageDays) |>
  mutate(Batch = fct_inorder(Batch)) |>
  pull(Batch)
  

BarChart <- VXABCRecoSummary_Long |>
  mutate(Batch = factor(Batch, levels = VXABCRecoSumLong)) |>
  ggplot(aes(x=Batch, y=days, fill=`Storage phase`)) +
  geom_col(width=1, alpha = 0.8) +
  scale_y_continuous(expand = expansion(mult = c(0,0))) +
  scale_fill_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  scale_colour_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  ggthemes::theme_economist() + 
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.y = element_text(margin = margin(r = 10), size = 8),
        axis.text.y = element_text(size = 8),
        plot.background = element_rect(fill = "#F7F1DF", colour = "#F7F1DF"),
        legend.text = element_text(size = 6),
        legend.title = element_blank(), #element_text(size = 8),
        strip.text = element_text(margin = margin(b=10), size = 8))
  

PointChart <- VXABCRecoSummary |> 
  mutate(Batch = factor(Batch, levels = VXABCRecoSumLong)) |>
  arrange(Batch) |>
  mutate(index = row_number()) |>
  pivot_longer(cols = c(PrimaryPackout, SecondaryPackout, TotalYield),
               names_to = "Packing phase",
               values_to = "Yield") |>
  select(c(index, `Packing phase`, Yield)) |>
  ggplot(aes(x=index, y=Yield, colour = `Packing phase`)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess") +
  labs(x = "Batch") +
  scale_y_continuous(labels = scales::label_percent(1.0)) +
  scale_x_continuous(expand = expansion(mult = c(0,0))) +
  scale_fill_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  scale_colour_manual(values = c("#a9342c","#48762e","#526280","#f6c15f")) +
  ggthemes::theme_economist() + 
  theme(legend.position = "top",
        axis.title.x = element_text(margin = margin(t = 10), size = 8),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.y = element_text(margin = margin(r = 10), size = 8),
        axis.text.y = element_text(size = 8),
        plot.background = element_rect(fill = "#F7F1DF", colour = "#F7F1DF"),
        legend.text = element_text(size = 6),
        legend.title = element_blank(), #element_text(size = 8),
        legend.margin = margin(t=0,r=0,b=0,l=0),
        strip.text = element_text(margin = margin(b=10), size = 8))

cowplot::plot_grid(BarChart,PointChart, align = "h", ncol=1, axis ="lr")

```


## Future work/trials

In addition to the transit pack format trials, discussions are underway with Plant & Food and Massey University to look at characterizing the strength of the Rockit apple using apparatus and methodology developed for the Kiwifruit industry.  Preliminary (proof of concept) experiments are being planned for 2025.  

Further analysis work is ongoing with looking at the effects of low pressure and SPI to fruit strength and manifest defects. Hormones applied at harvest (e.g. Ethrel and Harvista) are also being analyses to better understand if any correlation exists between fruit storability and physiological condition.  This will likely result in machine learning models that will be able to give some insight into the drivers of transit losses and to provide prediction of fruit already in the supply chain.

## References 

